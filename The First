//This is the initial ideation for the logic of the first part of two-part challenge. 
#include "M5Atom.h"

const unsigned long eventInterval = 1000; // interval at which to blink (milliseconds) not going to change
unsigned long  previousTime = 0; // will store last time LED was updated , unsigned long because value of Millis gets extremely large 
//screen update 

void setup()
{
    M5.begin(true, false, true);
    delay(50);
    M5.dis.drawpix(0, 0xf00000);//paint 1st LED
}

uint8_t FSM = 0;

void loop()
{
    if (M5.Btn.wasPressed())
    {
        int x, y;
        switch (FSM)
        {
        case 0:  //All black
            for (x = 0; x < 5; x++) {
                for (y = 0; y < 5; y++) {
                 M5.dis.drawpix(x, y, 00000000);
                  }
                        }
            delay(100);
             break;
             
        case 1:   //all red
             for (x = 0; x < 5; x++) {
                for (y = 0; y < 5; y++) {
                 M5.dis.drawpix(x, y,0x00f000);
                  }
                        }
            break;
        case 2: 
            
            // all white
            for (x = 0; x < 5; x++) {
                for (y = 0; y < 5; y++) {
                 M5.dis.drawpix(x, y,0x707070);
                  }
                        }
            break;
            
        default:
            break;
        }
        FSM++;
        if (FSM >= 4)
        {
            FSM = 0;
        }
    }

    /*if button pressed 3 times, so red light on, display black then white immeadelty and wait for the interval assigned, then this will loop using void loop function*/ 
  if (FSM == 3) 
  {
    unsigned long currentTime = millis();  //updates frequently the current time 
    if (currentTime - previousTime >= eventInterval)
    {
      for (x = 0; x < 5; x++) 
      {
          for (y = 0; y < 5; y++) 
          {
              M5.dis.drawpix(x, y,00000000); //all black 
              M5.dis.drawpix(x, y,0x707070); //all white
              
           }
           //update time for next time around 
           previousTime = currentTime;
      }
      
     } 
     
   }
   delay(50);
    M5.update();
}

